*********************************************
1. basicinfo/curriculum haben die gleiche Sidebar. Kann man da auch der “Redundanz” entgehen also mit {{yield}} arbeiten?
*********************************************

Erstelle ein neues Layout "sidebar_left_layout.html"

<template name="baseLayout">
  {{>topNavigation}}

  <div class="container">
    <div class="col-sm-3">
      {{>leftMenu}}
    </div>
    <div class="col-sm-9">
      {{yield}}
    </div>
  </div>
</template>

leftMenu: Ist dann wieder ein neues Template, könnte man gut im Ordner /navigation unterbringen.

Dann musst du das layout noch in den routes festlegen, da ja standardmäßig das baseLayout genutzt wird:

this.route('basicinfo', {
  template: 'basicinfo',
  path: '/basicinfo',
  layoutTemplate: 'sidebarLeftLayout'
});

entsprechend in anderen routes wo du das Layout nutzen möchtest.

*********************************************
2. Beim Signup-Prozess: Wie ist es möglich sein PW zu wiederholen?
*********************************************

Accounts-Entry hat hierfür keine Option, also müsstest du das Package anpassen.

/packages/accounts-entry/sign-up/signUp.html

Da ist in Zeile 43 das Feld für das Passwort. Hier müsstest du dann ein neues Input-Feld hinzufügen bspw:
<div class="form-group">
  <label>Password</label>
  <input type="password" id="password2" name="password2" class="form-control" value=''>
</div>

Jetzt musst du noch validieren ob die beiden passwörter auch gleich sind. Der code für das Abschicken der SignUp-Form ist unter:

/packages/accounts-entry/sign-up/signUp.coffee

In Zeile 55 wird das normale passwort ausgelesen, übrigens nicht besonders gut da die css-selectoren hier gut auch mit ID's gemacht werden könnten.

Für dein password2 bspw. so:
password2 = t.find('#password2').value

Dann Validierung:
return Session.set('entryError', 'Passwords aren't equal') if password2 isnt password


*********************************************
3. Ich werde meine alten Bootstrap-Daten nicht los. Habe neue BS-Daten (s.bootstrap_data.js). Die alten werden nicht überschrieben. Habe es schon mit Meteor Reset versucht.
*********************************************
Installiere dir mal RoboMongo: http://robomongo.org/
Erstelle dir da eine neue Connection mit Adresse: 127.0.0.1:3002
Damit kannst du dich mit einer grafischen UI mit der mongodb von der meteor app verbinden. Dann gehe zu "meteor -> Collections -> Courses" und dort findest du alle einträge, kannst sie anschauen und löschen.

Alternativ kannst du in deiner bootstrap_data.js auch alle löschen und neu hinzufügen:

Meteor.startup(function () {
  //Generate some placeholders if the database is empty
  Courses.remove({});
  if (Courses.find().count() === 0) {...}
});

Hier wird dann natürlich bei jedem Startup alles gelöscht und neu hinzugefügt, auch nicht ideal. Also könntest du Courses.remove({}) einfach wieder rausnehmen nach dem ersten neustart, dann sollten ja alle Einträge raus sein.

*********************************************
4. Bei den BS-Daten wirst Du sehen, dass ich gerne Tags haben möchte. Habe ich das mit den Tags richtig gemacht (in ein Array packen)?
*********************************************
Das kannst du so machen. Ein Dokument in der MongoDB ist im grunde beliebig erweiterbar, aber das solltest du nur machen wenn die größe des Dokuments nicht unendlich groß werden kann.

Bsp:
Wenn du Kommentare zu einem Kurs einführen würdest, könntest du die auch in ein Array packen 

Ein Course-Dokument:
{
  ...
  comments:[ 
    {user: "12345", comment: "..."},
    {user: "45623", comment: "..."},
    ...
  ]
  ...
}

Das Problem ist, dass diese comments sehr groß werden können und ein Dokument in der MongoDB hat nur eine maximale größe. Daher würde man hier eine neue Collection anlegen namens Comments und ein Dokument könnte so aussehen:

{
  user_id: "12345",
  course_id: "222333",
  text: "..."
}

Da die Tags aber von der Größe her sehr überschaubar bleiben dürften, mache es ruhig so wie du es aktuell machst.

*********************************************
5. Wenn man ausgeloggt ist, sieht man alle Kurse der DB. Super. Wenn man eingeloggt ist, sieht man gar keine (sollten unter dem <h/> “Popular Courses” kommen): Bei "home_user.html (Z26-Z29 funktioniert nicht)”, müsste der Fehler sein?!
*********************************************

Es fehlt der Data-Context. Das Template hat keine Ahnung was "courses" sein soll.

Den legst du in dem Router fest über data, schau mal hier:
https://github.com/EventedMind/iron-router#data

und bei mir unter "DATA CONTEXT FROM A COLLECTION"
http://de.paypertise.com/meteorjs/iron-router-tutorial

*********************************************
6. Basic_info.js: "Router.routes['curriculum’];” Dahin soll man - nachdem beim Formular von /basicinfo auf Save gedrückt hat - weitergeleitet werden. Klappt nicht. Eigentlich ist die Route nach /curriculum auch Blödsinn. Der Kursersteller müsste ja zum “spezifischen” gerade kreiierten Kurs weiter geleitet werden. Weißt Du was ich meine?
*********************************************

Du leitest weiter mit Router.go('curriculum')

Und ja, unter /curriculum sollte nicht immer das gleiche Curriculum sein. Die URL-Struktur ist ziemlich wichtig, damit setze ich mich auch meist intensiv auseinander. Bei dir wäre es bspw. in etwa so:

/courses -> Auflistung von Kursen
/courses/:_id -> Ein spezieller Kurs bspw. die Ausgabe der basicInfos
/courses/:_id/curriculum -> Das Curriculum des Kurses mit der _id
/courses/:_id/:section -> Eine spezielle Section eines speziellen Kurses

Für alle diese URL's müsstest du eine neue route anlegen. Den Datacontext machst du dann von dem jeweiligen Parameter in der URL abhängig.

Bspw für /courses/:_id

this.route('course', {
  template: 'showBasicInfo',
  path: '/courses/:_id',
  data: function(){
    return Courses.findOne({_id: this.params._id});
  }
});

Jetzt wird also das Template 'showBasicInfo' gerendert und die Daten kommen von genau dem Course mit der ID aus der URL.

/courses/2391828392 -> _id = 2391828392

Noch schöner wäre es natürlich wenn die URL so aussehen würde und der Kurs über einen "slug" identifiziert würde:

/courses/how-to-do-proper-meteor

this.route('course', {
  template: 'showBasicInfo',
  path: '/courses/:slug',
  data: function(){
    return Courses.findOne({slug: this.params.slug});
  }
});

